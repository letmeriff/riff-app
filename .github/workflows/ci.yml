name: CI and Deploy to Staging

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  DEPLOYMENT_ENV: staging
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install root dependencies
        run: npm install --legacy-peer-deps

      - name: Setup frontend environment
        working-directory: frontend
        run: |
          npm install --legacy-peer-deps
          # Create .env file for tests if needed
          echo "REACT_APP_API_URL=http://localhost:8000" > .env
          echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" >> .env
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> .env

      - name: Install backend dependencies
        working-directory: backend
        run: npm install --legacy-peer-deps

      - name: Run linting for frontend
        working-directory: frontend
        run: npm run lint

      - name: Run linting for backend
        working-directory: backend
        run: npm run lint

      - name: Run formatting check
        run: npm run format:check

      - name: Run frontend tests
        working-directory: frontend
        run: |
          # Ensure node_modules/.bin is in PATH
          export PATH=$PATH:$(pwd)/node_modules/.bin
          CI=true npm test -- --watchAll=false --passWithNoTests --transformIgnorePatterns "node_modules/(?!(@testing-library)/)/"

      - name: Run backend tests
        working-directory: backend
        run: npm test --passWithNoTests

  deploy-staging:
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Setup frontend environment
        working-directory: frontend
        run: |
          npm install --legacy-peer-deps
          # Create .env file for build
          echo "REACT_APP_API_URL=https://api.staging.riffsound.app" > .env
          echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" >> .env
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> .env

      - name: Pull Vercel Environment Information
        working-directory: frontend
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build frontend
        working-directory: frontend
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy frontend to Vercel
        id: deploy-frontend
        working-directory: frontend
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to $DEPLOYMENT_URL"

      - name: Install backend dependencies
        working-directory: backend
        run: npm install --legacy-peer-deps

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Deploy backend to Render
        id: deploy-backend
        run: |
          DEPLOY_RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
          echo "deploy_id=$(echo $DEPLOY_RESPONSE | jq -r '.id')" >> $GITHUB_OUTPUT

      - name: Wait for deployment
        run: |
          echo "Waiting for deployments to complete..."
          sleep 30  # Give services time to start deploying

      - name: Create deployment status comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const frontendUrl = '${{ steps.deploy-frontend.outputs.deployment_url }}';
            const backendDeployId = '${{ steps.deploy-backend.outputs.deploy_id }}';
            
            const comment = `üöÄ Staging Deployment Status:
            
            Frontend: [View deployment](${frontendUrl})
            Backend: [View deploy #${backendDeployId}](https://dashboard.render.com/web/${{ secrets.RENDER_SERVICE_ID }}/deploys/${backendDeployId})
            
            Environment: Staging
            Triggered by: ${context.actor}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const message = `‚ùå Staging deployment failed!
            
            Environment: Staging
            Triggered by: ${context.actor}
            
            Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.`;
            
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } 